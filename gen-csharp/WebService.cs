/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class WebService {
  public interface Iface {
    long findNode(string street, string postal);
    #if SILVERLIGHT
    IAsyncResult Begin_findNode(AsyncCallback callback, object state, string street, string postal);
    long End_findNode(IAsyncResult asyncResult);
    #endif
    List<Coordinate> calcShortestWay(string algorithm, long startNode, long endNode);
    #if SILVERLIGHT
    IAsyncResult Begin_calcShortestWay(AsyncCallback callback, object state, string algorithm, long startNode, long endNode);
    List<Coordinate> End_calcShortestWay(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_findNode(AsyncCallback callback, object state, string street, string postal)
    {
      return send_findNode(callback, state, street, postal);
    }

    public long End_findNode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findNode();
    }

    #endif

    public long findNode(string street, string postal)
    {
      #if !SILVERLIGHT
      send_findNode(street, postal);
      return recv_findNode();

      #else
      var asyncResult = Begin_findNode(null, null, street, postal);
      return End_findNode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findNode(AsyncCallback callback, object state, string street, string postal)
    #else
    public void send_findNode(string street, string postal)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("findNode", TMessageType.Call, seqid_));
      findNode_args args = new findNode_args();
      args.Street = street;
      args.Postal = postal;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_findNode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findNode_result result = new findNode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ouch) {
        throw result.Ouch;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findNode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_calcShortestWay(AsyncCallback callback, object state, string algorithm, long startNode, long endNode)
    {
      return send_calcShortestWay(callback, state, algorithm, startNode, endNode);
    }

    public List<Coordinate> End_calcShortestWay(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_calcShortestWay();
    }

    #endif

    public List<Coordinate> calcShortestWay(string algorithm, long startNode, long endNode)
    {
      #if !SILVERLIGHT
      send_calcShortestWay(algorithm, startNode, endNode);
      return recv_calcShortestWay();

      #else
      var asyncResult = Begin_calcShortestWay(null, null, algorithm, startNode, endNode);
      return End_calcShortestWay(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_calcShortestWay(AsyncCallback callback, object state, string algorithm, long startNode, long endNode)
    #else
    public void send_calcShortestWay(string algorithm, long startNode, long endNode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("calcShortestWay", TMessageType.Call, seqid_));
      calcShortestWay_args args = new calcShortestWay_args();
      args.Algorithm = algorithm;
      args.StartNode = startNode;
      args.EndNode = endNode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Coordinate> recv_calcShortestWay()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      calcShortestWay_result result = new calcShortestWay_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "calcShortestWay failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["findNode"] = findNode_Process;
      processMap_["calcShortestWay"] = calcShortestWay_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void findNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findNode_args args = new findNode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findNode_result result = new findNode_result();
      try {
        result.Success = iface_.findNode(args.Street, args.Postal);
      } catch (WebServiceException ouch) {
        result.Ouch = ouch;
      }
      oprot.WriteMessageBegin(new TMessage("findNode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void calcShortestWay_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      calcShortestWay_args args = new calcShortestWay_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      calcShortestWay_result result = new calcShortestWay_result();
      result.Success = iface_.calcShortestWay(args.Algorithm, args.StartNode, args.EndNode);
      oprot.WriteMessageBegin(new TMessage("calcShortestWay", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findNode_args : TBase
  {
    private string _street;
    private string _postal;

    public string Street
    {
      get
      {
        return _street;
      }
      set
      {
        __isset.street = true;
        this._street = value;
      }
    }

    public string Postal
    {
      get
      {
        return _postal;
      }
      set
      {
        __isset.postal = true;
        this._postal = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool street;
      public bool postal;
    }

    public findNode_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Street = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Postal = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("findNode_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Street != null && __isset.street) {
        field.Name = "street";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Street);
        oprot.WriteFieldEnd();
      }
      if (Postal != null && __isset.postal) {
        field.Name = "postal";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Postal);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("findNode_args(");
      sb.Append("Street: ");
      sb.Append(Street);
      sb.Append(",Postal: ");
      sb.Append(Postal);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findNode_result : TBase
  {
    private long _success;
    private WebServiceException _ouch;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public WebServiceException Ouch
    {
      get
      {
        return _ouch;
      }
      set
      {
        __isset.ouch = true;
        this._ouch = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ouch;
    }

    public findNode_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I64) {
              Success = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Ouch = new WebServiceException();
              Ouch.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("findNode_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I64;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.ouch) {
        if (Ouch != null) {
          field.Name = "Ouch";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ouch.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("findNode_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Ouch: ");
      sb.Append(Ouch== null ? "<null>" : Ouch.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class calcShortestWay_args : TBase
  {
    private string _algorithm;
    private long _startNode;
    private long _endNode;

    public string Algorithm
    {
      get
      {
        return _algorithm;
      }
      set
      {
        __isset.algorithm = true;
        this._algorithm = value;
      }
    }

    public long StartNode
    {
      get
      {
        return _startNode;
      }
      set
      {
        __isset.startNode = true;
        this._startNode = value;
      }
    }

    public long EndNode
    {
      get
      {
        return _endNode;
      }
      set
      {
        __isset.endNode = true;
        this._endNode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool algorithm;
      public bool startNode;
      public bool endNode;
    }

    public calcShortestWay_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Algorithm = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              StartNode = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              EndNode = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("calcShortestWay_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Algorithm != null && __isset.algorithm) {
        field.Name = "algorithm";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Algorithm);
        oprot.WriteFieldEnd();
      }
      if (__isset.startNode) {
        field.Name = "startNode";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartNode);
        oprot.WriteFieldEnd();
      }
      if (__isset.endNode) {
        field.Name = "endNode";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndNode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("calcShortestWay_args(");
      sb.Append("Algorithm: ");
      sb.Append(Algorithm);
      sb.Append(",StartNode: ");
      sb.Append(StartNode);
      sb.Append(",EndNode: ");
      sb.Append(EndNode);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class calcShortestWay_result : TBase
  {
    private List<Coordinate> _success;

    public List<Coordinate> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public calcShortestWay_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<Coordinate>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  Coordinate _elem2 = new Coordinate();
                  _elem2 = new Coordinate();
                  _elem2.Read(iprot);
                  Success.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("calcShortestWay_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (Coordinate _iter3 in Success)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("calcShortestWay_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
