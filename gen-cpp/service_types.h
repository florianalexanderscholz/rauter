/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef service_TYPES_H
#define service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ws {

typedef struct _Coordinate__isset {
  _Coordinate__isset() : lon(false), lat(false) {}
  bool lon;
  bool lat;
} _Coordinate__isset;

class Coordinate {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Coordinate() : lon(0), lat(0) {
  }

  virtual ~Coordinate() throw() {}

  double lon;
  double lat;

  _Coordinate__isset __isset;

  void __set_lon(const double val) {
    lon = val;
  }

  void __set_lat(const double val) {
    lat = val;
  }

  bool operator == (const Coordinate & rhs) const
  {
    if (!(lon == rhs.lon))
      return false;
    if (!(lat == rhs.lat))
      return false;
    return true;
  }
  bool operator != (const Coordinate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coordinate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Coordinate &a, Coordinate &b);

typedef struct _WebServiceException__isset {
  _WebServiceException__isset() : what(false) {}
  bool what;
} _WebServiceException__isset;

class WebServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  WebServiceException() : what() {
  }

  virtual ~WebServiceException() throw() {}

  std::string what;

  _WebServiceException__isset __isset;

  void __set_what(const std::string& val) {
    what = val;
  }

  bool operator == (const WebServiceException & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    return true;
  }
  bool operator != (const WebServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WebServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WebServiceException &a, WebServiceException &b);

} // namespace

#endif
